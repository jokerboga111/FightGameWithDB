/*
*Game Controller
*/
public class GameController
{
 Public Boolean ShowCreationPanel {get; set;}
    Public Boolean ShowFightingPanel {get; set;}
    Public Boolean ShowSelectionPanel {get; set;}
    Public Boolean ShowFightResultPanel {get; set;}
    Public Profile first {get; set;}
    Public Profile second {get; set;}
    Public Profile__c SelectedProfile {get; set;}
    Public List<Profile__c> profiles{get; set;}
    Public List<ProfileWrapp> wrappList {get; set;}
    Public String SelectRace {get; set;}
    Public String CreatingProfileName {get; set;}
    Public String HitPlace {get; set;}
    Public String BlockPlace {get; set;}
    Public String fightLogMessage {get; set;}
    Public Integer roundNumber {get; set;}
    Public Profile__c PcFighter {get; set;}
     
    /*
    *Wrapp class for inner information about user
    */
    
    public class ProfileWrapp
    {
        public String id{get; set;}
        public String Name{get; set;}
        public String Race{get; set;}
        public Integer RateWinner{get; set;}
        public Integer TopWinner{get; set;}
        public Boolean isSelected{get; set;}
        public Boolean isDisabled{get; set;}
        public DateTime timeToRelease {get; set;}
    }
    
 /*
 *Standart Game constructor for find info about Users through method SelectFromDatabase
 */
 public GameController()
    {
        ShowSelectionPanel = true;
        SelectFromDatabase();        
    }
        
 
    /*
    *Method use for insert information in Profile first ,and second(choose User)
    */
    public void FighterSelection()
    {
        
      for (ProfileWrapp wr: wrappList)
        {
            if (wr.isSelected)
            {
                SelectedProfile = [SELECT id, Name, Race__c, Health_Points__c, Min_Dmg__c, Max_Dmg__c, Accuracy__c, Dexterity__c,TopWinnerNumber__c
                                       FROM Profile__c 
                                       WHERE id =: wr.Id];
            }
        }
        
        first = new Profile(SelectedProfile.Name, SelectedProfile.Race__c, Integer.valueOf(SelectedProfile.Health_Points__c),
                        Integer.valueOf(SelectedProfile.Min_Dmg__c), Integer.valueOf(SelectedProfile.Max_Dmg__c),
                        Integer.valueOf(SelectedProfile.Accuracy__c), Integer.valueOf(SelectedProfile.Dexterity__c));
        
        Integer RandomPCFighter = Math.round(Math.floor(Math.random() * (profiles.size() - 0.5)));
           PcFighter = profiles.get(RandomPCFighter);
        second = new Profile(PcFighter.Name, PcFighter.Race__c, Integer.valueOf(PcFighter.Health_Points__c),
                        Integer.valueOf(PcFighter.Min_Dmg__c), Integer.valueOf(PcFighter.Max_Dmg__c),
                        Integer.valueOf(PcFighter.Accuracy__c), Integer.valueOf(PcFighter.Dexterity__c));
        
        ShowFightingPanel = true;
        ShowFightResultPanel = true;
        ShowSelectionPanel = false;
        roundNumber = 1;
    }
    
    /*
    *Method for change to true ShowCreationPanel
    */
    
    public void ShowCreationPane()
    {
        ShowCreationPanel = true;
    }          
    
  /*
  *Create new Fighter (Choose Race ,Human,Elven,DarkSoul,Tauren)
  */
    public void CreateNewFighter()
    {
        if ((SelectRace == 'Human') 
        || (SelectRace == 'Elven') 
        || (SelectRace == 'DarkSoul') 
        || (SelectRace == 'Tauren'))
        {
        Profile__c createdFighter = new Profile__c();
        createdFighter.Name = CreatingProfileName;
        
        if (SelectRace == 'Human')
        {
            createdFighter.Race__c = 'Human';
            createdFighter.Health_Points__c = 650;
            createdFighter.Min_Dmg__c = 45;
            createdFighter.Max_Dmg__c = 63;
            createdFighter.Accuracy__c = 60;
            createdFighter.Dexterity__c = 40;
        
        }
       else  if (SelectRace == 'Elven')
        {
            createdFighter.Race__c = 'Elven';
            createdFighter.Health_Points__c = 800;
            createdFighter.Min_Dmg__c = 30;
            createdFighter.Max_Dmg__c = 50;
            createdFighter.Accuracy__c = 40;
            createdFighter.Dexterity__c = 20;
          
        }
        else  if (SelectRace == 'DarkSoul')
        {
            createdFighter.Race__c = 'DarkSoul';
            createdFighter.Health_Points__c = 500;
            createdFighter.Min_Dmg__c = 65;
            createdFighter.Max_Dmg__c = 94;
            createdFighter.Accuracy__c = 50;
            createdFighter.Dexterity__c = 30;
        }
        else  if (SelectRace == 'Tauren')
        {
            createdFighter.Race__c = 'Tauren';
            createdFighter.Health_Points__c = 850;
            createdFighter.Min_Dmg__c = 50;
            createdFighter.Max_Dmg__c = 69;
            createdFighter.Accuracy__c = 74;
            createdFighter.Dexterity__c = 45;
        }
        
       ShowCreationPanel = false;
        try
        {
        insert createdFighter; 
        }
        catch(DMLException e)
        {
        System.debug('Error'+e);
        }
         SelectFromDatabase();     
        }
        else 
        {
         /*
          * Error if you choose another race
          */
          ApexPages.Message myError = new ApexPages.Message(ApexPages.Severity.ERROR,
          'Enter the right Race. Such as: "Human", "Elven", "DarkSoul", "Tauren"');
          ApexPages.addMessage(myError);
        }
    }
    

    /*
     * Find kicks 
    */
    public List<SelectOption> getItems() {
        List<SelectOption> options = new List<SelectOption>(); 
        options.add(new SelectOption('Head','Head')); 
        options.add(new SelectOption('UpperBody','UpperBody')); 
        options.add(new SelectOption('LowerBody','LowerBody'));
        options.add(new SelectOption('Legs','Legs'));
        return options; 
    }      
    
    
    /*
     * Writing all info abount fight in the List logs
    */
    public void FightCalculation() 
    {
        
      if (first.getHP() > 0 && second.getHP() > 0 ){
        Integer hitPlacePC = Math.round((Math.floor(Math.random() * 3.8)));
        Integer blockPlacePC = Math.round((Math.floor(Math.random() * 3.8)));
        SelectOption placePCHit = getItems().get(hitPlacePC);
        SelectOption placePCblock = getItems().get(blockPlacePC);
               
        if (hitPlace != placePCBlock.getValue() & blockPlace != placePCHit.getValue())
        {
        List<Integer> damages =Profile.fighting(first,second, true, true);
            if (damages.get(0) != 0 & damages.get(1) != 0)
            {
              fightLogMessage = 'Round ' + RoundNumber + ' - ' + first.Name + ' hit ' + second.Name + ' in the '+
              hitPlace + '\n' + second.Name + ' hit ' + first.Name + ' in the ' +  placePCHit.getValue() + '\n';
            } else if (damages.get(0) != 0 & damages.get(1) == 0)
            {
              fightLogMessage = 'Round ' + RoundNumber + ' - ' + first.Name + ' hit ' + second.Name + ' in the ' +
              hitPlace + '\n' + second.Name + ' missed'+ '\n';
            } else if (damages.get(0) == 0 & damages.get(1) != 0)
            {
                fightLogMessage = 'Round ' + RoundNumber + ' - ' + first.Name + ' missed ' + '\n' + 
                second.Name + ' hit ' + first.Name + ' in the ' +  placePCHit.getValue() + '\n';
            } else 
            {
               fightLogMessage = 'Round ' + RoundNumber + ' - ' + first.Name + ' missed '+
              '\n' + second.Name + ' missed ' + '\n';}
        } else {
            if (hitPlace == placePCBlock.getValue() & blockPlace != placePCHit.getValue())
            {
              List<Integer> damages = Profile.fighting(first,second, false, true);
                if (damages.get(1) !=0)
                {
                    fightLogMessage = 'Round ' + RoundNumber + ' - the hit from ' + first.Name + ' was blocked' +
                    '\n' + second.Name + ' hit ' + first.Name + ' in the ' +  placePCHit.getValue() + '\n';
                } else 
                {
                    fightLogMessage = 'Round ' + RoundNumber + ' - the hit from ' + first.Name + ' was blocked' +
                    '\n' + second.Name + ' missed' + '\n';}
                }
            else
            {
                List<Integer> damages = Profile.fighting(first,second, true, false);
                if (damages.get(0) != 0)
                {
                fightLogMessage = 'Round ' + RoundNumber + ' - ' + first.Name + ' hit ' + second.Name + ' in the ' 
                + hitPlace + '\n' + ' the hit from ' + second.Name + ' was blocked' + '\n';
                } else {
                fightLogMessage = 'Round ' + RoundNumber + ' - ' + first.Name + ' missed ' + '\n' + ' the hit from '
                 + second.Name + ' was blocked' + '\n';   
                }
            }
        }
     List<Profile__c> pf=new List<Profile__c>();
        if (first.getHP() <= 0 & second.getHP() >= 0)
        {
            fightLogMessage = second.Name + ' Win!'; 
            first.setHP(0);
            try
            {
            /*
             * If you lose you deactivate for one day
            */
                SelectedProfile=deactivate(SelectedProfile);
                pf=[Select id, Name, Race__c, Health_Points__c, Min_Dmg__c, Max_Dmg__c, Accuracy__c, 
                  Dexterity__c,Block_Time__c,TopWinnerNumber__c,NumberInTop__c
                  FROM Profile__c where id!=:SelectedProfile.Id ];
                pf.add(SelectedProfile);
                System.debug(pf.size());
                update pf;
            } catch (DMLException e)
            {
            System.debug('Error'+e);
            }
                        
        } else {
            if (first.getHP() >= 0 & second.getHP() <= 0)
            {
                fightLogMessage = first.Name + ' Win!';
                second.setHP(0);   
                first.RateWinnerTop= (Integer)SelectedProfile.TopWinnerNumber__c+1;
                 try
            {
                SelectedProfile.TopWinnerNumber__c= SelectedProfile.TopWinnerNumber__c+1;
                 pf=[Select id, Name, Race__c, Health_Points__c, Min_Dmg__c, Max_Dmg__c, Accuracy__c, 
                  Dexterity__c,Block_Time__c,TopWinnerNumber__c,NumberInTop__c
                  FROM Profile__c where id!=:SelectedProfile.Id ];
                pf.add(SelectedProfile);
                System.debug(pf.size());
                update pf;
            } catch (DMLException e)
            {
            System.debug('Error'+e);
            }
            } else {
                if (first.getHP() <= 0 & second.getHP() <= 0)
                {
                    fightLogMessage = 'Both heroes are death, nobody win)'; 
                    first.setHP(0);
                    second.setHP(0);                   
                }
            }
        }
        }
        roundNumber++;             
    }
    
      public void SelectFromDatabase()
    {
        profiles = [SELECT id, Name, Race__c, Health_Points__c, Min_Dmg__c, Max_Dmg__c, Accuracy__c, 
                  Dexterity__c,Block_Time__c,TopWinnerNumber__c,NumberInTop__c
                  FROM Profile__c ORDER BY NumberInTop__c];
        wrappList = new List<ProfileWrapp>();
        
        DateTime currentDateTime = datetime.now();
        
        for (Profile__c p: profiles)
        {
            ProfileWrapp wrapp = new ProfileWrapp();
            wrapp.id = p.id;
            wrapp.name = p.name;
            wrapp.Race = p.Race__c;
            wrapp.TopWinner=(Integer)p.NumberInTop__c;
            wrapp.RateWinner=(Integer)p.TopWinnerNumber__c;
            wrapp.isSelected = false;
            if (p.Block_Time__c != null && currentDateTime < p.Block_Time__c)
            {
                wrapp.isDisabled = true;
                wrapp.timeToRelease = p.Block_Time__c;
            }
            
            wrappList.add(wrapp);
        }
        
        System.debug(currentDateTime);
    }
    
      private Profile__c deactivate(final Profile__c looserProfile) {
           Profile__c loosersUnitDB=new Profile__c ();
        if (looserProfile != null) {
                String looserId = looserProfile.Id;
                List<Profile__c> loosersProfiles = [
                        select Block_Time__c, isActive__c
                        from Profile__c
                        where Id = :looserProfile.Id
                ];
                if (loosersProfiles.size() == 1) {
                    loosersUnitDB = loosersProfiles.get(0);
                    loosersUnitDB.isActive__c = false;
                    loosersUnitDB.Block_Time__c = DateTime.now();
                    return loosersUnitDB;
                } else if (loosersProfiles.isEmpty()) {
                    System.debug('not found');
                } else {
                    System.debug('not save');
                }
            
        } 
                return loosersUnitDB;
    }
}
